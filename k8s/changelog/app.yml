#@ load("@ytt:data", "data")
#! https://github.com/k14s/ytt/blob/master/examples/data-values/config.yml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: #@ data.values.app.name
  namespace: #@ data.values.namespace
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: cert-manager-webhook-dnsimple-production
    external-dns.alpha.kubernetes.io/ttl: "60"
    service.beta.kubernetes.io/linode-loadbalancer-proxy-protocol: v2
spec:
  tls:
    - hosts:
        - #@ data.values.fqdn
        - www.changelog.com
        - 2020.changelog.com
      secretName: wildcard-acme-tls
    - hosts:
        - brainscience.fm
      secretName: brainscience-fm-acme-tls
    - hosts:
        - changelog.fm
      secretName: changelog-fm-acme-tls
    - hosts:
        - founderstalk.fm
      secretName: founderstalk-fm-acme-tls
    - hosts:
        - gotime.fm
      secretName: gotime-fm-acme-tls
    - hosts:
        - jsparty.fm
      secretName: jsparty-fm-acme-tls
    - hosts:
        - practicalai.fm
      secretName: practicalai-fm-acme-tls
  rules:
    - host: #@ data.values.fqdn
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
    - host: www.changelog.com
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
    - host: 2020.changelog.com
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
    - host: brainscience.fm
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
    - host: changelog.fm
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
    - host: founderstalk.fm
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
    - host: gotime.fm
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
    - host: jsparty.fm
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
    - host: practicalai.fm
      http:
        paths:
          - backend:
              serviceName: #@ data.values.app.name
              servicePort: #@ data.values.app.http_port
---
apiVersion: v1
kind: Service
metadata:
  name: #@ data.values.app.name
  namespace: #@ data.values.namespace
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4000"
spec:
  ports:
    - name: http
      port: #@ data.values.app.http_port
      protocol: TCP
      targetPort: #@ data.values.app.http_port
  selector:
    app: #@ data.values.app.name
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads
  namespace: #@ data.values.namespace
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: #@ data.values.app.uploads_volume_size
  storageClassName: linode-block-storage-retain
---
apiVersion: cert-manager.io/v1alpha3
kind: Certificate
metadata:
  name: wildcard-acme-tls
  namespace: #@ data.values.namespace
spec:
  dnsNames: #@ data.values.app.https.domains
  issuerRef:
    name: cert-manager-webhook-dnsimple-production
    kind: ClusterIssuer
  secretName: wildcard-acme-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.app.name
  namespace: #@ data.values.namespace
  labels:
    app: #@ data.values.app.name
    #! https://keel.sh/docs/#policies
    keel.sh/policy: force
    keel.sh/match-tag: "true"
spec:
  replicas: #@ data.values.app.replicas
  selector:
    matchLabels:
      app: #@ data.values.app.name
  template:
    metadata:
      labels:
        app: #@ data.values.app.name
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - #@ data.values.app.name
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: db-backup
          image: #@ data.values.db.restore.image
          imagePullPolicy: #@ data.values.image.pull_policy
          command: ["/usr/local/bin/backup_db_continuously"]
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backups-aws
                  key: access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backups-aws
                  key: secret_access_key
            - name: AWS_REGION
              value: us-east-1
            - name: AWS_S3_BUCKET
              value: changelog-com-backups
            - name: PGHOST
              value: db
            - name: PGDATABASE
              value: db
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-postgres-secret
                  key: password
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: db-postgres-secret
                  key: username
        - name: uploads-backup
          image: #@ data.values.db.restore.image
          imagePullPolicy: #@ data.values.image.pull_policy
          command: ["/usr/local/bin/backup_uploads_continuously"]
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backups-aws
                  key: access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backups-aws
                  key: secret_access_key
            - name: AWS_REGION
              value: us-east-1
            - name: AWS_S3_BUCKET
              value: changelog-com-backups
            - name: UPLOADS_PATH
              value: "/uploads"
          volumeMounts:
            - mountPath: "/uploads"
              name: uploads
        - name: #@ data.values.app.name
          env:
            - name: ALGOLIA_APPLICATION_ID
              valueFrom:
                secretKeyRef:
                  name: algolia
                  key: application_id
            - name: ALGOLIA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: algolia
                  key: api_key
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: secret_access_key
            - name: BUFFER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: buffer
                  key: token
            - name: CM_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: campaignmonitor
                  key: api_token
            - name: CM_SMTP_TOKEN
              valueFrom:
                secretKeyRef:
                  name: campaignmonitor
                  key: smtp_token
            - name: COVERALLS_REPO_TOKEN
              valueFrom:
                secretKeyRef:
                  name: coveralls
                  key: repo_token
            - name: DB_HOST
              value: db
            - name: DB_NAME
              value: db
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: db-postgres-secret
                  key: password
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-postgres-secret
                  key: username
            - name: GITHUB_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github
                  key: api_token
            - name: GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: github
                  key: client_id
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: github
                  key: client_secret
            - name: HCAPTCHA_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: hcaptcha
                  key: secret_key
            - name: HN_USER
              valueFrom:
                secretKeyRef:
                  name: hackernews
                  key: user
            - name: HN_PASS
              valueFrom:
                secretKeyRef:
                  name: hackernews
                  key: pass
            - name: PLUSPLUS_SLUG
              valueFrom:
                secretKeyRef:
                  name: plusplus
                  key: slug
            - name: PORT
              value: #@ str(data.values.app.http_port)
            - name: ROLLBAR_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: rollbar
                  key: access_token
            - name: ROLLBAR_ENVIRONMENT
              value: #@ data.values.app.environment
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: app
                  key: secret_key_base
            - name: SHOPIFY_API_KEY
              valueFrom:
                secretKeyRef:
                  name: shopify
                  key: api_key
            - name: SHOPIFY_API_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: shopify
                  key: api_password
            - name: SIGNING_SALT
              valueFrom:
                secretKeyRef:
                  name: app
                  key: signing_salt
            - name: SLACK_APP_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: app_api_token
            - name: SLACK_DEPLOY_WEBHOOK
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: deploy_webhook
            - name: SLACK_INVITE_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: slack
                  key: invite_api_token
            - name: TWITTER_CONSUMER_KEY
              valueFrom:
                secretKeyRef:
                  name: twitter
                  key: consumer_key
            - name: TWITTER_CONSUMER_SECRET
              valueFrom:
                secretKeyRef:
                  name: twitter
                  key: consumer_secret
            - name: UPLOADS_PATH
              value: priv/uploads
            - name: URL_HOST
              value: #@ data.values.fqdn
            - name: URL_PORT
              value: #@ str(data.values.app.https_port)
            - name: URL_SCHEME
              value: #@ data.values.app.url_scheme
            - name: URL_STATIC_HOST
              value: #@ data.values.cdn
            - name: GRAFANA_URL
              value: "http://prometheus-grafana.kube-prometheus-stack.svc.cluster.local"
            - name: GRAFANA_DATASOURCE_ID
              value: "Prometheus"
            - name: GRAFANA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: api_key
          image: #@ data.values.app.image
          imagePullPolicy: #@ data.values.image.pull_policy
          #! command:
          #!   - iex
          #!   - --sname
          #!   - debug
          #!   - -S
          #!   - mix
          #!   - phx.server
          ports:
            - name: phoenix
              containerPort: #@ data.values.app.http_port
          resources:
            limits:
              cpu: #@ data.values.app.cpu_max
              memory: #@ data.values.app.mem_max
            requests:
              cpu: #@ data.values.app.cpu_min
              memory: #@ data.values.app.mem_min
          readinessProbe:
            httpGet:
              path: /health
              port: phoenix
              httpHeaders:
                - name: Host
                  value: 127.0.0.1
            periodSeconds: 15
            timeoutSeconds: 14
          startupProbe:
            httpGet:
              path: /health
              port: phoenix
              httpHeaders:
                - name: Host
                  value: 127.0.0.1
            failureThreshold: 30
            periodSeconds: 10
          volumeMounts:
            - mountPath: "/app/priv/uploads"
              name: uploads
      volumes:
        - name: uploads
          persistentVolumeClaim:
            claimName: uploads

version: "3.7"

services:
  log:
    command: syslog+tls://logs7.papertrailapp.com:40471
    deploy:
      mode: global
      restart_policy:
        condition: any
      update_config:
        failure_action: rollback
        # start_period + (interval * retries)
        monitor: 50s
        order: start-first
    healthcheck:
      test: ["CMD", "wget", "--output-document", "/dev/null", "--quiet",  "http://127.0.0.1:80/health"]
      interval: 15s
      timeout: 15s
      retries: 3
      start_period: 5s
    environment:
      SYSLOG_HOSTNAME: 2019
    image: gliderlabs/logspout:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  db:
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    environment:
      POSTGRES_USER: &pg_user postgres
      POSTGRES_DB: &pg_db changelog
      # https://www.postgresql.org/docs/9.5/libpq-envars.html
      PGUSER: *pg_user
      PGDATABASE: *pg_db
    healthcheck:
      test: ["CMD", "pg_isready"]
      start_period: 30s
    image: postgres:9.5.4
    volumes:
      - /db:/var/lib/postgresql/data:rw
  db_backup:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 15s
      update_config:
        failure_action: rollback
        monitor: 15s
        order: stop-first
    environment:
      # https://www.postgresql.org/docs/9.5/libpq-envars.html
      PGHOST: db
      PGUSER: *pg_user
      PGDATABASE: *pg_db
      AWS_REGION: "us-east-1"
      AWS_S3_BUCKET: "changelog-com-backups"
      BACKUP_DB_EVERY_N_SECONDS: 86400
    secrets:
      - BACKUPS_AWS_ACCESS_KEY
      - BACKUPS_AWS_SECRET_KEY
      - DB_PASSWORD
    image: thechangelog/db_backup
    depends_on:
      - db
  app:
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      # https://docs.docker.com/compose/compose-file/#update_config
      update_config:
        failure_action: rollback
        # start_period + (interval * retries)
        monitor: 115s
        order: start-first
    healthcheck:
      test: ["CMD", "curl", "--output", "/dev/null", "--fail", "--fail-early",  "--silent",  "http://127.0.0.1:4000/health"]
      interval: 15s
      timeout: 15s
      retries: 3
      start_period: 60s
    environment:
      NODE: "${HOSTNAME}"
      PORT: 4000
      URL_HOST: &host changelog.com
      URL_PORT: 443
      URL_SCHEME: https
      URL_STATIC_HOST: cdn.changelog.com
      ROLLBAR_ENVIRONMENT: production
    secrets:
      - CM_API_TOKEN
      - CM_SMTP_TOKEN
      - GITHUB_API_TOKEN
      - GITHUB_CLIENT_ID
      - GITHUB_CLIENT_SECRET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - TWITTER_CONSUMER_KEY
      - TWITTER_CONSUMER_SECRET
      - SECRET_KEY_BASE
      - SIGNING_SALT
      - SLACK_INVITE_API_TOKEN
      - SLACK_APP_API_TOKEN
      - ROLLBAR_ACCESS_TOKEN
      - BUFFER_TOKEN
      - COVERALLS_REPO_TOKEN
      - ALGOLIA_APPLICATION_ID
      - ALGOLIA_API_KEY
      - DB_URL
      - SLACK_DEPLOY_WEBHOOK
    depends_on:
      - db
    image: thechangelog/changelog.com
    ports:
      - "4000:4000"
    volumes:
      - /uploads:/uploads:rw
  app_updater:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      # https://docs.docker.com/compose/compose-file/#update_config
      update_config:
        failure_action: rollback
        monitor: 30s
        order: stop-first
    command: update_service_continuously
    environment:
      HOSTNAME: "${HOSTNAME}"
      UPDATE_SERVICE_EVERY_N_SECONDS: 30
    image: thechangelog/bootstrap
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - changelog.com:/app:rw
  proxy:
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      update_config:
        failure_action: rollback
        # start_period + interval
        monitor: 20s
        order: start-first
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 10s
      retries: 0
      start_period: 5s
    image: thechangelog/proxy
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /uploads:/var/www/uploads:ro
  netdata:
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      update_config:
        failure_action: rollback
        # start_period + (interval * retries)
        monitor: 75s
        order: start-first
    healthcheck:
      test: ["CMD", "curl", "--output", "/dev/null", "--fail", "--fail-early",  "--silent",  "http://127.0.0.1:19999/"]
      interval: 15s
      timeout: 15s
      retries: 3
      start_period: 30s
    image: netdata/netdata
    hostname: 2019_netdata
    environment:
      # netdata container is too verbose, tell Logspout to not send logs to Papertrail
      # https://github.com/gliderlabs/logspout#ignoring-specific-containers
      LOGSPOUT: ignore
    ports:
      - "19999:19999"
    # cap_add, security_opt & privileged are not support by Docker Swarm, works OK without
    # https://stackoverflow.com/questions/53163044/docker-stack-ignoring-unsupported-options
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro

volumes:
  changelog.com:

# https://docs.docker.com/engine/swarm/secrets/#defining-and-using-secrets-in-compose-files
secrets:
  CM_API_TOKEN:
    external: true
  CM_SMTP_TOKEN:
    external: true
  GITHUB_API_TOKEN:
    external: true
  GITHUB_CLIENT_ID:
    external: true
  GITHUB_CLIENT_SECRET:
    external: true
  AWS_ACCESS_KEY_ID:
    external: true
  AWS_SECRET_ACCESS_KEY:
    external: true
  BACKUPS_AWS_ACCESS_KEY:
    external: true
  BACKUPS_AWS_SECRET_KEY:
    external: true
  TWITTER_CONSUMER_KEY:
    external: true
  TWITTER_CONSUMER_SECRET:
    external: true
  SECRET_KEY_BASE:
    external: true
  SIGNING_SALT:
    external: true
  SLACK_INVITE_API_TOKEN:
    external: true
  SLACK_APP_API_TOKEN:
    external: true
  ROLLBAR_ACCESS_TOKEN:
    external: true
  BUFFER_TOKEN:
    external: true
  COVERALLS_REPO_TOKEN:
    external: true
  ALGOLIA_APPLICATION_ID:
    external: true
  ALGOLIA_API_KEY:
    external: true
  DB_URL:
    external: true
  DB_PASSWORD:
    external: true
  SLACK_DEPLOY_WEBHOOK:
    external: true

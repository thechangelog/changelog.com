# https://www.parca.dev/docs/kubernetes
#
# Website is generated by Vercel after a release gets created: https://github.com/parca-dev/parca/blob/main/.github/workflows/release.yml#L92-L94
# https://github.com/parca-dev/parca.dev/blame/main/docs/kubernetes.mdx#L89
#
# Download Pprof from the agent for a specific CPU profile - Show CPU profile - localhost:7071
# Use pprof to analyse that profile locally - Parca is build and exposes the standards eBPF -> pprof etc.
#
# Hold shift in the UI and then select the filter for the CPU Samples filtering
#
# Next: maybe compile Erlang VM with symbols - that will only show Erlang VM details, but not our app code.
# How do we compile our app with symbols support so that Parca can read that file?
# Interesting: https://www.erlang-solutions.com/blog/performance-testing-the-jit-compiler-for-the-beam-vm/
#
# Nice surprise: https://github.com/pyrra-dev/pyrra & https://demo.pyrra.dev/

PARCA_SERVER_RELEASES := https://github.com/parca-dev/parca/releases
PARCA_SERVER_VERSION := 0.4.2

PARCA_AGENT_RELEASES := https://github.com/parca-dev/parca-agent/releases
PARCA_AGENT_VERSION := 0.2.0

.PHONY: lke-parca
lke-parca: | lke-ctx
	@printf "$(YELLOW)TODO: parca namespace does not need to be set up separately, it is captured in the manifest: $(BOLD)https://www.parca.dev/docs/kubernetes$(RESET)\n"
	$(KUBECTL) $(K_CMD) --filename https://github.com/parca-dev/parca-agent/releases/download/v$(PARCA_AGENT_VERSION)/kubernetes-manifest.yaml
	$(KUBECTL) $(K_CMD) --filename https://github.com/parca-dev/parca/releases/download/v$(PARCA_SERVER_VERSION)/kubernetes-manifest.yaml
lke-bootstrap:: | lke-parca
